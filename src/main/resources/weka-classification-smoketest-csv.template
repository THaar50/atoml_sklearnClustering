    @Test(timeout=<<<TIMEOUT>>>)
    public void test_<<<NAME>>>() throws Exception {
        for(int iter=1; iter<=<<<ITERATIONS>>>; iter++) {
            <<<MYSQLEVALSMOKE_START>>>Instances data = loadData("/smokedata/<<<NAME>>>_" + iter + "_training.arff");
            Instances testdata = loadData("/smokedata/<<<NAME>>>_" + iter + "_test.arff");
            Classifier classifier = AbstractClassifier.forName("<<<PACKAGENAME>>>.<<<CLASSIFIER>>>", Arrays.copyOf(parameters, parameters.length));
            classifier.buildClassifier(data);
            for (Instance instance : testdata) {
                classifier.classifyInstance(instance);
                classifier.distributionForInstance(instance);
            }<<<MYSQLEVALSMOKE_END>>>
            // get predictions on full testdata
            Evaluation eval = null;
            try {
                eval = new Evaluation(data);
                eval.evaluateModel(classifier, testdata);
            } catch (Exception ex) {
            }
            ArrayList pred = eval.predictions();
            // create a csv file
            String filePath = "predictions/pred_<<<IDENTIFIER>>>_<<<NAME>>>_" + iter + ".csv";
            try {
                File outFile = new File(filePath);
                outFile.createNewFile();
            } catch (IOException e) {
                System.out.println( "Creating the csv file failed." );
                e.printStackTrace();
            }
            // write in csv
            try {
                FileWriter outWriter = new FileWriter(filePath);
                // write header
                outWriter.write("type,actual,prediction,weigth,prob_0,prob_1\\n");
                // write predictions
                for (Object i : pred) {
                    outWriter.write(i.toString().replace(" ", ",") + '\\n');
                };
                outWriter.close();
                System.out.println( "Predictions saved at: " + filePath );
            } catch (IOException e) {
                System.out.println( "Writing the predictions to csv file failed." );
                e.printStackTrace();
            }
            // get predictions on full training data as test data
            Evaluation evalTrainingAsTest = null;
            try {
                evalTrainingAsTest = new Evaluation(data);
                evalTrainingAsTest.evaluateModel(classifier, data);
            } catch (Exception ex) {
            }
            ArrayList pred = evalTrainingAsTest.predictions();
            // create a csv file
            String filePath = "predictions/pred_<<<IDENTIFIER>>>_<<<NAME>>>_TrainingAsTest_" + iter + ".csv";
            try {
                File outFile = new File(filePath);
                outFile.createNewFile();
            } catch (IOException e) {
                System.out.println( "Creating the csv file failed." );
                e.printStackTrace();
            }
            // write in csv
            try {
                FileWriter outWriter = new FileWriter(filePath);
                // write header
                outWriter.write("type,actual,prediction,weigth,prob_0,prob_1\\n");
                // write predictions
                for (Object i : pred) {
                    outWriter.write(i.toString().replace(" ", ",") + '\\n');
                };
                outWriter.close();
                System.out.println( "Predictions saved at: " + filePath );
            } catch (IOException e) {
                System.out.println( "Writing the predictions to csv file failed." );
                e.printStackTrace();
            }
        }
    }

